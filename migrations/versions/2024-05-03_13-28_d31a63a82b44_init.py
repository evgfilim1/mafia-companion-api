"""Init

Revision ID: d31a63a82b44
Revises:
Create Date: 2024-05-03 13:28:01.080213+00:00

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "d31a63a82b44"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "players",
        sa.Column("id", sa.Integer(), sa.Identity(always=False), nullable=False),
        sa.Column("nickname", sa.String(), nullable=False),
        sa.Column("real_name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("nickname"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), sa.Identity(always=False), nullable=False),
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("player_id", sa.Integer(), nullable=False),
        sa.Column("password_hash", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["player_id"], ["players.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("username"),
    )
    op.create_table(
        "tournaments",
        sa.Column("id", sa.Integer(), sa.Identity(always=False), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("date_from", sa.DateTime(timezone=True), nullable=False),
        sa.Column("date_to", sa.DateTime(timezone=True), nullable=False),
        sa.Column("created_by_user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"], ["users.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "tables",
        sa.Column("id", sa.Integer(), sa.Identity(always=False), nullable=False),
        sa.Column("tournament_id", sa.Integer(), nullable=False),
        sa.Column("number", sa.Integer(), nullable=False),
        sa.Column("judge_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["judge_id"], ["players.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["tournament_id"], ["tournaments.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("tournament_id", "number"),
    )
    op.create_table(
        "tournament_players",
        sa.Column("player_id", sa.Integer(), nullable=False),
        sa.Column("tournament_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["player_id"], ["players.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["tournament_id"], ["tournaments.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("player_id", "tournament_id"),
    )
    op.create_table(
        "games",
        sa.Column("id", sa.Integer(), sa.Identity(always=False), nullable=False),
        sa.Column("table_id", sa.Integer(), nullable=False),
        sa.Column("number", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["table_id"], ["tables.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("table_id", "number"),
    )
    op.create_table(
        "game_logs",
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("raw_game_log", sa.JSON(), nullable=False),
        sa.ForeignKeyConstraint(["game_id"], ["games.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("game_id"),
    )
    op.create_table(
        "game_player_extra_scores",
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("player_id", sa.Integer(), nullable=False),
        sa.Column("score", sa.Float(), nullable=False),
        sa.Column("reason", sa.String(), nullable=False),
        sa.CheckConstraint("reason LIKE '_%'"),
        sa.ForeignKeyConstraint(["game_id"], ["games.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["player_id"], ["players.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("game_id", "player_id"),
    )
    op.create_table(
        "game_player_results",
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("player_id", sa.Integer(), nullable=False),
        sa.Column("warn_count", sa.Integer(), nullable=False),
        sa.Column("was_kicked", sa.Boolean(), nullable=False),
        sa.Column("caused_other_team_won", sa.Boolean(), nullable=False),
        sa.Column("found_mafia_count", sa.Integer(), nullable=False),
        sa.Column("has_found_sheriff", sa.Boolean(), nullable=False),
        sa.Column("was_killed_first_night", sa.Boolean(), nullable=False),
        sa.Column("guessed_mafia_count", sa.Integer(), nullable=False),
        sa.CheckConstraint("found_mafia_count >= 0 AND found_mafia_count <= 3"),
        sa.CheckConstraint("guessed_mafia_count >= 0 AND guessed_mafia_count <= 3"),
        sa.CheckConstraint("warn_count >= 0 AND warn_count <= 4"),
        sa.CheckConstraint(
            "was_killed_first_night AND found_mafia_count >= 0 OR NOT was_killed_first_night"
        ),
        sa.ForeignKeyConstraint(["game_id"], ["games.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["player_id"], ["players.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("game_id", "player_id"),
    )
    op.create_table(
        "game_players",
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("player_id", sa.Integer(), nullable=False),
        sa.Column(
            "role", sa.Enum("MAFIA", "DON", "SHERIFF", "CITIZEN", name="role"), nullable=False
        ),
        sa.Column("seat", sa.Integer(), nullable=False),
        sa.CheckConstraint("seat >= 1 AND seat <= 10"),
        sa.ForeignKeyConstraint(["game_id"], ["games.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["player_id"], ["players.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("game_id", "player_id"),
        sa.UniqueConstraint("game_id", "seat"),
    )
    op.create_table(
        "game_results",
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("winner", sa.Enum("MAFIA", "CITIZEN", name="team"), nullable=True),
        sa.Column("finished_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["game_id"], ["games.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("game_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("game_results")
    op.drop_table("game_players")
    op.drop_table("game_player_results")
    op.drop_table("game_player_extra_scores")
    op.drop_table("game_logs")
    op.drop_table("games")
    op.drop_table("tournament_players")
    op.drop_table("tables")
    op.drop_table("tournaments")
    op.drop_table("users")
    op.drop_table("players")
    # ### end Alembic commands ###
    op.execute("DROP TYPE IF EXISTS role CASCADE")
    op.execute("DROP TYPE IF EXISTS team CASCADE")
