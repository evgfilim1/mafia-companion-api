services:
  api:
    build:
      context: .
      target: runtime
      network: host
    image: "ghcr.io/evgfilim1/mafia-companion-server:${IMAGE_VERSION:-dev}"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    env_file: .env
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST:-db}
      REDIS_HOST: ${REDIS_HOST:-cache}
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully
  db-migrate:
    build:
      context: .
      target: db-migrate
      network: host
    image: "ghcr.io/evgfilim1/mafia-companion-server:${IMAGE_VERSION:-dev}-migrate"
    restart: "no"
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    env_file: .env
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST:-db}
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    volumes:
      - pg_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: mafia-companion-server-database-admin
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
      start_interval: 5s
  cache:
    image: redis:7-alpine
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s
      start_interval: 1s

volumes:
  pg_data:
  redis_data:
